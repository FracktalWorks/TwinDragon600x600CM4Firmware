#Klipper v0.12.0 IDEX Congig. WILL NOT WORK WITH PREVIOUS VERION OF KLIPPER!

[respond]
default_type: echo


########################################
# IDEX CONFIG
########################################

[gcode_macro IDEX_VARIABLES]
# Offset coordinates for dual_carriage
variable_offset_x: 0 #-0.06  #-0.3 #was -0.15
variable_offset_y: 0 #-0.15 #was -0.15 #-0.3 #was0
variable_offset_z: 0  # 0.23
# Autopark parameters
## default autopark: 0:inactive - 1:active
variable_autopark: 1
variable_z_hop: 0.6
variable_movespeed: 500 #mm/s
variable_feedrate: 30000 #mm/min
# HeatBed size
variable_bed_x_min: 0
variable_bed_x_max: 600
variable_bed_y_min: 0
variable_bed_y_max: 600
# Print cooling fans names
variable_fan0: 'extruder_CF'
variable_fan1: 'extruder1_CF'
# Extruders temp
variable_offset_temp: 4
gcode:
    G90


[delayed_gcode STARTUP]
initial_duration: 1
gcode:
    SET_LED LED=toolhead0 GREEN=1.0
    SET_LED LED=toolhead1 GREEN=0.0

[gcode_macro T0]
description: Activate T0 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.carriage_1 == "PRIMARY" %}
            M400
            {% if printer.toolhead.homed_axes == "xyz" %}
                {% if not printer.gcode_move.gcode_position.x > idex_var.bed_x_max %}
                    {% if idex_var.autopark == 1 %}
                        # z-hop
                        {% if idex_var.z_hop|float > 0.0 %}
                            {% set max_z = printer.toolhead.axis_maximum.z|float %}
                            {% set cur_z = printer.toolhead.position.z|float %}
                            {% set z_safe = idex_var.z_hop|float if cur_z < (max_z - idex_var.z_hop|float) else (max_z - cur_z) %}
                            G91
                            G1 Z{z_safe}
                            G90
                        {% endif %}
                        # park tool
                        SAVE_GCODE_STATE NAME=toolhead_state
                        PARK_TOOL
                    {% endif %}
                {% endif %}
            {% endif %}
            # toggle carriage
            ACTIVATE_EXTRUDER EXTRUDER=extruder
            SET_DUAL_CARRIAGE CARRIAGE=0
            SET_LED LED=toolhead0 GREEN=1.0
            SET_LED LED=toolhead1 GREEN=0.0
            RESPOND TYPE=echo MSG="Active Extruder: 0"
            #SET_GCODE_OFFSET X=0 Y=0 Z=0
            {% if printer.toolhead.homed_axes == "xyz" %}
                {% if idex_var.autopark == 1 %}
                    {% if not printer.gcode_move.gcode_position.x > idex_var.bed_x_max %}
                        RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={idex_var.movespeed}
                    {% endif %}
                {% endif %}
            {% endif %}   
            SET_GCODE_OFFSET X=0 Y=0 Z=0
            {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                G91
                G1 Z-{z_safe}
                G90
            {% endif %}
        {% endif %}
    {% endif %}
    
[gcode_macro IDEX_STATUS]
gcode:
    RESPOND MSG="{printer.dual_carriage.carriage_0}"
    RESPOND MSG="{printer.dual_carriage.carriage_1}"

[gcode_macro T1]
description: Activate T1 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.carriage_0 == "PRIMARY" %}
            M400
            {% if printer.toolhead.homed_axes == "xyz" %}
                {% if not printer.gcode_move.gcode_position.x < idex_var.bed_x_min %}
                    {% if idex_var.autopark == 1 %}
                        # z-hop
                        {% if idex_var.z_hop|float > 0.0 %}
                            {% set max_z = printer.toolhead.axis_maximum.z|float %}
                            {% set cur_z = printer.toolhead.position.z|float %}
                            {% set z_safe = idex_var.z_hop|float if cur_z < (max_z - idex_var.z_hop|float) else (max_z - cur_z) %}
                            G91
                            G1 Z{z_safe}
                            G90
                        {% endif %}
                        # park tool
                        SAVE_GCODE_STATE NAME=toolhead_state
                        PARK_TOOL
                    {% endif %}
                {% endif %}
            {% endif %}
            # toggle carriage
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_DUAL_CARRIAGE CARRIAGE=1
            SET_LED LED=toolhead0 GREEN=0.0
            SET_LED LED=toolhead1 GREEN=1.0
            RESPOND TYPE=echo MSG="Active Extruder: 1"
            #SET_GCODE_OFFSET X={printer.save_variables.variables.tool_offset_x} Y={printer.save_variables.variables.tool_offset_y} Z={printer.save_variables.variables.tool_offset_z}
            {% if printer.toolhead.homed_axes == "xyz" %}
                {% if idex_var.autopark == 1 %}
                    {% if not printer.gcode_move.gcode_position.x < idex_var.bed_x_min %}
                        RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={idex_var.movespeed}
                    {% endif %}
                {% endif %}
            {% endif %}
            SET_GCODE_OFFSET X={printer.save_variables.variables.tool_offset_x} Y={printer.save_variables.variables.tool_offset_y} Z={printer.save_variables.variables.tool_offset_z}
            RESPOND TYPE=echo MSG="M218 X{printer.save_variables.variables.tool_offset_x} Y{printer.save_variables.variables.tool_offset_y} Z{printer.save_variables.variables.tool_offset_z}"
            {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                G91
                G1 Z-{z_safe}
                G90
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro PARK_TOOL]
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% if printer.dual_carriage is defined %}
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G90
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set XPOS = printer.configfile.config.stepper_x.position_endstop|float %}
            G1 X{XPOS} F{idex_var.feedrate}
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            {% set XPOS = printer.configfile.config.dual_carriage.position_max|float %}
            G1 X{XPOS} F{idex_var.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
    {% endif %}

## DUAL-CARRIAGES : PRINT FANS MANAGEMENT

[gcode_macro M106]
description: Override "M106" to allow multiple extruders.
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
    {% if (params.P) is defined %}
        {% set P_fan = idex_var.fan0 if (params.P)|int == 0 else idex_var.fan1 %}
        SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
    {% elif printer.dual_carriage is defined %}
        SET_FAN_SPEED FAN={idex_var.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={idex_var.fan1} SPEED={fan_speed}
    {% endif %}
    
[gcode_macro M107]
description: Override "M107" to allow multiple extruders.
gcode:
    M106 S0
    

## DUAL-CARRIAGES : HEATERS MANAGEMENT
    
[gcode_macro M104]
rename_existing: M104.1
description: Override "M104" to allow multiple extruders to be synchronized.
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(-1)|int %}
    {% if tool == -1 %}
        {% if printer.dual_carriage.carriage_1 == "COPY" or printer.dual_carriage.carriage_1 == "MIRROR" %}
            M104.1 T0 S{temp}
            M104.1 T1 S{temp} # + idex_var.offset_temp|float}
        {% else %}
            M104.1 S{temp}
        {% endif %}
    {% else %}
        M104.1 T{tool} S{temp}
    {% endif %}
    
[gcode_macro M109]
rename_existing: M109.1
description: Override "M109" to allow multiple extruders to be synchronized.
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(-1)|int %}
    {% if tool == -1 %}
        {% if printer.dual_carriage.carriage_1 == "COPY" or printer.dual_carriage.carriage_1 == "MIRROR" %}
            M104.1 T1 S{temp} # + idex_var.offset_temp|float}
            M109.1 T0 S{temp}
            M109.1 T1 S{temp} # + idex_var.offset_temp|float}
        {% else %}
            #M109.1 S{temp}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={params.S|float}
            TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={params.S|float - idex_var.offset_temp|float} MAXIMUM={params.S|float + idex_var.offset_temp|float}
        {% endif %}
    {% else %}
        #M109.1 T{tool} S{temp}
        {% if params.T == '0' %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.S|float}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.S|float - idex_var.offset_temp|float} MAXIMUM={params.S|float + idex_var.offset_temp|float}
        {% elif params.T == '1' %}
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={params.S|float}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={params.S|float - idex_var.offset_temp|float} MAXIMUM={params.S|float + idex_var.offset_temp|float}
        {% endif %}
    {% endif %}



[gcode_macro M605]
description: Set the dual-carriages mode
gcode:
    {% set mode = params.S|default(1)|int %}
    {% set offset_temp = params.R|default(0)|float %}
    {% if printer.dual_carriage is defined %}
        {% if (mode) == 0 %}
            SET_GCODE_VARIABLE MACRO=IDEX_VARIABLES VARIABLE=autopark VALUE=0
            FULL_CONTROL
        {% elif (mode) == 1 %}
            SET_GCODE_VARIABLE MACRO=IDEX_VARIABLES VARIABLE=autopark VALUE=1
            FULL_CONTROL
        {% elif (mode) == 2 and (params.X) is defined %}
            {% if printer.save_variables.variables.tool_offset_z > 0.4 %}
                CANCEL_PRINT
                RESPOND TYPE=error MSG="Z Tool Offset too high, cannot go into Duplication Mode"
            {% else %}
            MODE_DUPLICATION X={params.X} R={offset_temp}
            {% endif %}
        {% elif (mode) == 2 %}
            {% if printer.save_variables.variables.tool_offset_z > 0.4 %}
                CANCEL_PRINT
                RESPOND TYPE=error MSG="Z Tool Offset too high, cannot go into Duplication Mode"
            {% else %}           
            MODE_DUPLICATION R={offset_temp}
            {% endif %}
        {% elif (mode) == 3 %}
            {% if printer.save_variables.variables.tool_offset_z > 0.4 %}
                CANCEL_PRINT
                RESPOND TYPE=error MSG="Z Tool Offset too high, cannot go into Duplication Mode"
            {% else %}
            MODE_MIRRORED R={offset_temp}
            {% endif %}
        {% endif %}
        G1 F3000
    {% endif %}



[gcode_macro FULL_CONTROL]
description: Set the dual-carriages mode to "FULL_CONTROL"
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% if printer.dual_carriage is defined %}
        # unsync both carriages
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_LED LED=toolhead0 GREEN=1.0
        SET_LED LED=toolhead1 GREEN=0.0
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1 #SYNC_EXTRUDER_STEPPERS EXTRUDER=extruder1
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder_side1 MOTION_QUEUE=extruder1
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G28 X0
        #M420 S1
    {% endif %}

[gcode_macro _SYNC_EXTRUDERS_TEMP]
gcode:
    {% set temp = printer["extruder"].target|float %}
    #M109 S{temp}
    SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={temp}
    #TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={temp - idex_var.offset_temp|float} MAXIMUM={temp + idex_var.offset_temp|float}

[gcode_macro MODE_DUPLICATION]
description: Set the dual-carriages mode to "DUPLICATION"
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% set bed_x_mid = 0.5 * (idex_var.bed_x_max|float - idex_var.bed_x_min|float) %}
    {% set offset_temp = params.R|default(0)|float %}
    {% if printer.dual_carriage is defined %}
        # unsync both carriages
        FULL_CONTROL
        # place both carriages
        {% if printer.toolhead.homed_axes == "xyz" %}
            {% if idex_var.z_hop|float > 0.0 %}
                {% set max_z = printer.toolhead.axis_maximum.z|float %}
                {% set cur_z = printer.toolhead.position.z|float %}
                {% set z_safe = idex_var.z_hop|float if cur_z < (max_z - idex_var.z_hop|float) else (max_z - cur_z) %}
                G91
                G1 Z{z_safe}
                G90
            {% endif %}
            SET_DUAL_CARRIAGE CARRIAGE=1
            G1 X{params.X|default(bed_x_mid)|float} F{idex_var.feedrate}
            SET_DUAL_CARRIAGE CARRIAGE=0
            G1 X{idex_var.bed_x_min|float} F{idex_var.feedrate}
            # heaters management
            SET_GCODE_VARIABLE MACRO=IDEX_VARIABLES VARIABLE=offset_temp VALUE={offset_temp}
            _SYNC_EXTRUDERS_TEMP
            # steppers management
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder #SYNC_EXTRUDER_STEPPERS EXTRUDER=extruder1 TO=extruder
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder_side0 MOTION_QUEUE=extruder 
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder_side1 MOTION_QUEUE=extruder
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
            {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                G91
                G1 Z-{z_safe}
                G90
            {% endif %}
            SET_LED LED=toolhead0 GREEN=1.0
            SET_LED LED=toolhead1 GREEN=1.0
        {% else %}
            CANCEL_PRINT
            RESPOND TYPE=error MSG="Must home printer before going into Duplication or Mirror Mode"
        {% endif %}

    {% endif %}


[gcode_macro MODE_MIRRORED]
description: Set the dual-carriages mode to "MIRRORED"
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% set offset_temp = params.R|default(0)|float %}
    {% if printer.dual_carriage is defined %}
        # unsync both carriages
        FULL_CONTROL
        # place both carriages
        {% if printer.toolhead.homed_axes == "xyz" %}
            {% if idex_var.z_hop|float > 0.0 %}
                {% set max_z = printer.toolhead.axis_maximum.z|float %}
                {% set cur_z = printer.toolhead.position.z|float %}
                {% set z_safe = idex_var.z_hop|float if cur_z < (max_z - idex_var.z_hop|float) else (max_z - cur_z) %}
                G91
                G1 Z{z_safe}
                G90
            {% endif %}
            SET_DUAL_CARRIAGE CARRIAGE=1
            G1 X{idex_var.bed_x_max|float} F{idex_var.feedrate}
            SET_DUAL_CARRIAGE CARRIAGE=0
            G1 X{idex_var.bed_x_min|float} F{idex_var.feedrate}
            # heaters management
            SET_GCODE_VARIABLE MACRO=IDEX_VARIABLES VARIABLE=offset_temp VALUE={offset_temp}
            _SYNC_EXTRUDERS_TEMP
            # steppers management
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder #SYNC_EXTRUDER_STEPPERS EXTRUDER=extruder1 TO=extruder
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder_side0 MOTION_QUEUE=extruder 
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder_side1 MOTION_QUEUE=extruder
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
            {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                G91
                G1 Z-{z_safe}
                G90
            {% endif %}
            SET_LED LED=toolhead0 GREEN=1.0
            SET_LED LED=toolhead1 GREEN=1.0
        {% else %}
            CANCEL_PRINT
            RESPOND TYPE=error MSG="Must home printer before going into Duplication or Mirror Mode"
        {% endif %}
    {% endif %}
    
    
[gcode_macro G29]
gcode:
    {% set idex_var = printer["gcode_macro IDEX_VARIABLES"] %}
    {% set bed_x_mid = 0.5 * (idex_var.bed_x_max|float - idex_var.bed_x_min|float) %}
    BED_MESH_CLEAR
    {% if printer.dual_carriage.carriage_1 == "COPY" %}
        BED_MESH_CALIBRATE MESH_MIN=20,20 MESH_MAX={bed_x_mid|float - 20},{idex_var.bed_y_max|float -20} PROBE=3,5
    {% elif  printer.dual_carriage.carriage_1 == "MIRROR" %}
        BED_MESH_CALIBRATE MESH_MIN=20,20 MESH_MAX={bed_x_mid|float - 40},{idex_var.bed_y_max|float -40} PROBE=3,5
    {% elif  printer.dual_carriage.carriage_1 == "PRIMARY"  %}
        BED_MESH_CALIBRATE MESH_MIN=50,50 MESH_MAX={idex_var.bed_x_max|float - 50},{idex_var.bed_y_max|float - 50} PROBE=5,5
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}
    BED_MESH_PROFILE SAVE=p1
    SAVE_CONFIG NO_RESTART=1
    M420 S1
    
########################################
# Homing Sequence
########################################

[homing_override]
gcode:
    {% if printer.dual_carriage is defined %}
        # unsync both carriages
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_LED LED=toolhead0 GREEN=1.0
        SET_LED LED=toolhead1 GREEN=0.0
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1 #SYNC_EXTRUDER_STEPPERS EXTRUDER=extruder1
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder_side1 MOTION_QUEUE=extruder1
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_GCODE_OFFSET X=0 Y=0 Z=0
    {% endif %}
    BED_MESH_CLEAR
    {% if params.X and not params.Y and not params.Z %}
        G28 X0
    {% endif %}
    {% if not params.X and params.Y and not params.Z %}
        G28 Y0
    {% endif %}
    {% if not params.X and not params.Y and params.Z %}
        G28 Z0
        G91
        G0 Z-4
        G90
    {% endif %}    
    {% if params.Y and params.X and not params.Z %}
        G28 Y0
        G28 X
    {% endif %}
    {% if not params.X and not params.Y and not params.Z %}
        # G1 Z10 F6 # No need to do this, G28 Z already does it. Move Z up just incase the nozzle is too close to the bed before homing (can be the case in cancelled prints/powercuts/emergency stops)
        G28 Z0 # Home z, because detector is on the bed, not the nozzle
        G28 Y0 # Do Y next, to avoid potentially hitting the back of the nozzle wipe.
        G28 X0
        G91
        G0 Z-4
        G90
    {% endif %}
    {% if params.X and params.Y and params.Z %}
        G28 Z0
        G28 Y0
        G28 X0
        G91
        G0 Z-4
        G90
    {% endif %}